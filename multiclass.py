# -*- coding: utf-8 -*-
"""Multiclass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tJtTjI-AICuzbbHy0VqKDnno0tBprbhQ
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator

!pip install -q kaggle
from google.colab import files
files.upload()
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

import subprocess
dataset_api_path = "trushraut18/colour-classification"
subprocess.run(["kaggle", "datasets", "download", "-d",dataset_api_path])

import zipfile, os
zip_path = os.path.join("/content", "colour-classification.zip")
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
 zip_ref.extractall("/content/data")

IMG_SIZE=224
BATCH_SIZE=32

train_datagen=ImageDataGenerator(rescale=1./255,validation_split=0.2)

train_generator=train_datagen.flow_from_directory(
'/content/data/Data/train',
 target_size=(IMG_SIZE,IMG_SIZE),
 batch_size=BATCH_SIZE,
 class_mode='categorical',
 subset='training'
)

val_generator=train_datagen.flow_from_directory(
 '/content/data/Data/train',
 target_size=(IMG_SIZE,IMG_SIZE),
 batch_size=BATCH_SIZE,
 class_mode='categorical',
 subset='validation'
)

num_classes = 3  # your case

model = keras.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(num_classes, activation='softmax')  # âœ… match label shape
])

model.summary()

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

import os
from PIL import Image

from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True


root_dir = "/content/data/Data/train"

for root, dirs, files in os.walk(root_dir):
    for file in files:
        if file.lower().endswith(('png', 'jpg', 'jpeg')):
            path = os.path.join(root, file)
            try:
                img = Image.open(path)
                img.verify()  # verify without decoding
            except (IOError, SyntaxError):
                print(f"Removing corrupted image: {path}")
                os.remove(path)

model.fit(train_generator,epochs=5,validation_data=val_generator)

model.save("/content/data/RGB_Model.h5")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
model=load_model('/content/data/RGB_Model.h5')
print("Model Loaded")

test_image_path='/content/data/Data/test/Green/Green16.jpg'
img=image.load_img(test_image_path,target_size=(224,224))
plt.imshow(img)
plt.axis()
plt.show()

img_array=image.img_to_array(img)
img_array=np.expand_dims(img_array,axis=0)
img_array/=255

prediction=model(img_array)
print(prediction)
predicted_index = np.argmax(prediction)

class_names = ['Red', 'Green', 'Blue']
print(f"Predicted Colour: {class_names[predicted_index]}")
print(f"Probabilities: {prediction}")